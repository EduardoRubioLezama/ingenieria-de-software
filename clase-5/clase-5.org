#+title: Clase 5: Servlets, JSP y JSF
#+author: Miguel Piña
#+date: [2017-03-12 dom 12:49]
#+setupfile: ~/proyectos/org-html-themes/setup/theme-bigblow.setup

* ¿Qué son los Servlets?

Los Servlets son módulos escritos en Java que se utilizan en un servidor, que
puede ser o no ser servidor web, para extender sus capacidades de respuesta a
los clientes al utilizar las potencialidades de Java.

Los servlets pueden ser incluidos en servidores que soporten la API de Servlet
(Tomcat, Glassfish). La API no realiza suposiciones sobre el entorno que se
utiliza, como tipo de servidor o plataforma, ni del protocolo a utilizar, aunque
existe una API especial para HTTP.

** Protocolo HTTP

Es el protocolo de comunicación que permite las transferencias de información en
la Internet. HTTP fue desarrollado por el World Wide Web Consortium (W3C) y la
Internet Engineering Task Force, colaboración que culminó en 1999 con la
publicación de una serie de RFC, el más importante de ellos es el RFC 2616 que
especifica la versión 1.1. HTTP define la sintaxis y la semántica que utilizan
los elementos de software de la arquitectura web (clientes, servidores, proxies)
para comunicarse.

*** Métodos de petición

HTTP define una serie predefinida de métodos de petición (algunas veces referido
como "verbos") que pueden utilizarse. El protocolo tiene flexibilidad para ir
añadiendo nuevos métodos y para así añadir nuevas funcionalidades. El número de
métodos de petición se han ido aumentando según se avanzaban en las versiones.
Cada método indica la acción que desea que se efectúe sobre el recurso
identificado. Lo que este recurso representa depende de la aplicación del
servidor. Los métodos más comunes son:

- HEAD
- GET
- POST
- PUT
- DELETE
- TRACE

** Get

El concepto GET es obtener información del servidor. Traer datos que están en el
servidor, ya sea en un archivo o base de datos, al cliente. Independientemente
de que para eso tengamos que enviar (request) algún dato que será procesado para
luego devolver la respuesta (response) que esperamos, como por ejemplo un
identificador para obtener una noticia de la base de datos.

** Post

POST sin embargo es enviar información desde el cliente para que sea procesada y
actualice o agregue información en el servidor, como sería la carga o
actualización en sí de una noticia. Cuando enviamos (request) datos a través de
un formulario, estos son procesados y luego a través de una redirección por
ejemplo devolvemos (response) alguna página con información.


** ¿Cómo utilizar los servlets?

Los Servlets se van a describir a partir de una clase abstracta denominada
HTTPServlet. En ella hay que sobreescribir dos métodos:

- doGet(request, response)
- doPost(request, response)

*** doGet

*doGet* se va a encargar de resolver todas las peticiones que le hagamos a nuestro
servlet vía método GET. El uso más común de doGet es para realizar redirecciones
a otras páginas ó resolver documentos solicitados al servidor.

*** doPost

*doPost* se va a encargar de resolver todas las peticiones que le hagamos a
nuestro servlet vía el método POST. El uso más común, es para el envío de
información que se captura en un formulario y se procesa en el servidor.

* ¿Qué es un JSP?

JSP es un acrónimo de Java Server Pages, que en español vendría a decir algo
como Páginas de Servidor Java. Es una tecnología orientada a crear páginas web
con programación en Java.

Las páginas JSP están compuestas de código HTML/XML mezclado con etiquetas
especiales para programar scripts de servidor en sintaxis Java. Por tanto, las
JSP podremos escribirlas con nuestro editor HTML/XML habitual.

** Java Server Faces

JavaServer Faces (JSF) es una tecnología y framework para aplicaciones Java
basadas en web que simplifica el desarrollo de interfaces de usuario en
aplicaciones Java EE. JSF usa JavaServer Pages (JSP) como la tecnología que
permite hacer el despliegue de las páginas, pero también se puede acomodar a
otras tecnologías como XUL (acrónimo de XML-based User-interface Language,
lenguaje basado en XML para la interfaz de usuario)

Esta compuesto de:

- Un conjunto de APIs para representar componentes de una interfaz de usuario y
  administrar su estado, manejar eventos, validar entrada, definir un esquema de
  navegación de las páginas y dar soporte para internacionalización y
  accesibilidad.
- Un conjunto por defecto de componentes para la interfaz de usuario.
- Dos bibliotecas de etiquetas personalizadas para JavaServer Pages que permiten
  expresar una interfaz JavaServer Faces dentro de una página JSP.
- Un modelo de eventos en el lado del servidor.
- Administración de estados.
- Beans administrados.

** Primefaces

PrimeFaces es una librería de componentes para JavaServer Faces (JSF) de código
abierto que cuenta con un conjunto de componentes enriquecidos que facilitan la
creación de las aplicaciones web. Primefaces está bajo la licencia de Apache
License V2. Una de las ventajas de utilizar Primefaces, es que permite la
integración con otros componentes como por ejemplo RichFaces.

** Integrando JSF con nuestro proyecto en Maven

Vamos a construir un validador de contraseñas usando JSF y primefaces. Esto lo
vamos hacer integrándolo con el proyecto ejemplo-maven que hemos estado
trabajando.

Agregamos el siguiente código al archivo pom.xml

#+begin_src xml
  <!-- Agrega mos soporte para java server faces -->
  <dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
    <version>1.2</version>
  </dependency>
  <dependency>
    <groupId>com.sun.faces</groupId>
    <artifactId>jsf-api</artifactId>
    <version>2.2.8</version>
    <type>jar</type>
  </dependency>
  <dependency>
    <groupId>com.sun.faces</groupId>
    <artifactId>jsf-impl</artifactId>
    <version>2.2.8-19</version>
  </dependency>
  <!-- Soporte para primefaces -->
  <dependency>
    <groupId>org.primefaces</groupId>
    <artifactId>primefaces</artifactId>
    <version>6.0</version>
  </dependency>
#+end_src
Ajustamos web.xml para que luzca ahora así:

#+begin_src xml
  <?xml version="1.0" encoding="UTF-8"?>
  <web-app version="3.1"
           xmlns="http://xmlns.jcp.org/xml/ns/javaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">
    <display-name>Archetype Created Web Application</display-name>

    <context-param>
      <param-name>javax.faces.PROJECT_STAGE</param-name>
      <param-value>Development</param-value>
    </context-param>
    <servlet>
      <servlet-name>Faces Servlet</servlet-name>
      <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
      <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
      <servlet-name>Faces Servlet</servlet-name>
      <url-pattern>/faces/*</url-pattern>
    </servlet-mapping>
      <servlet-mapping>
      <servlet-name>Faces Servlet</servlet-name>
      <url-pattern>*.xhtml</url-pattern>
    </servlet-mapping>
    <servlet>
      <servlet-name>servlet</servlet-name>
      <servlet-class>com.miguel.proyecto.MiServlet</servlet-class>
    </servlet>
    <servlet-mapping>
      <servlet-name>servlet</servlet-name>
      <url-pattern>/foo</url-pattern>
    </servlet-mapping>
  </web-app>
#+end_src
Agregamos un bean que represente un usuario del sistema (se puede ajustar para
usar los que se crearon con la ingeniería inversa de JPA).

#+begin_src java
  package com.miguel.proyecto.web;

  public class Usuario {

      private String usuario;
      private String contraseña;
      private String confirmacionContraseña;

      public String getUsuario() {
          return usuario;
      }

      public void setUsuario(String usuario) {
          this.usuario = usuario;
      }

      public String getContraseña() {
          return contraseña;
      }

      public void setContraseña(String contraseña) {
          this.contraseña = contraseña;
      }

      public String getConfirmacionContraseña() {
          return confirmacionContraseña;
      }

      public void setConfirmacionContraseña(String confirmacionContraseña) {
          this.confirmacionContraseña = confirmacionContraseña;
      }

  }
#+end_src
Agregamos un bean manejado de JSF.

#+begin_src java
  package com.miguel.proyecto.web;

  import java.util.Locale;

  import javax.faces.application.FacesMessage;
  import javax.faces.bean.ManagedBean;
  import javax.faces.bean.RequestScoped;
  import javax.faces.context.FacesContext;

  /**
   ,*
   ,* @author miguel
   ,*/
  @ManagedBean
  @RequestScoped
  public class RegisterController {

  private Usuario user = new Usuario();

      public Usuario getUser() {
          return user;
      }

      public void setUser(Usuario user) {
          this.user = user;
      }

      public RegisterController() {
          FacesContext.getCurrentInstance().getViewRoot().setLocale(new Locale("es-Mx"));
      }

      public String addUser() {
          if (!user.getContraseña().equals(user.getConfirmacionContraseña())) {
              FacesContext.getCurrentInstance().addMessage(null
                                                           , new FacesMessage(FacesMessage.SEVERITY_ERROR, "Fallo de registro: Las contraseñas deben coincidir", ""));
          } else {
              FacesContext.getCurrentInstance().addMessage(null,
                      new FacesMessage(FacesMessage.SEVERITY_INFO, "Felicidades, el registro se ha realizado correctamente", ""));
              user = null;
          }
          return null;
      }

  }
#+end_src
Y finalmente la página que queremos visualizar. En este caso un ejemplo sencillo
de validación de contraseñas.

#+begin_src html
  <?xml version='1.0' encoding='UTF-8' ?>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://xmlns.jcp.org/jsf/html"
        xmlns:p="http://primefaces.org/ui">
    <h:head>
      <title>Ejemplo de JavaServer Faces</title>
    </h:head>
    <h:body>

      <h1>Formulario de registro</h1> <br/>

      <h:form id="myForm">
        <table>
          <tr>
            <td>Nombre de usuario</td>
            <td><p:inputText value="#{registerController.user.usuario}" required="true" id="Username" size="10"/></td>
          </tr>
          <tr>
            <td>Contraseña</td>
            <td><p:password value="#{registerController.user.contraseña}" required="true" feedback="true" id="Password"/></td>
          </tr>
          <tr>
            <td>Confirmar Contraseña</td>
            <td><p:password value="#{registerController.user. confirmacionContraseña}" required="true" feedback="true" id="ConfirmPassword"/></td>
          </tr>
          <tr>
            <td colspan="2" align="center">
              <p:commandButton action="#{registerController.addUser}" value="Registrar"/>
              <p:commandButton value="Reset" update="myForm" process="@this"  >
                <p:resetInput target="myForm" />
              </p:commandButton>
            </td>
          </tr>
        </table>
        <table>
          <tr>
            <td><p:messages id="messages" autoUpdate="true" closable="true" /></td>
          </tr>
        </table>
      </h:form>
    </h:body>
  </html>
#+end_src

Y terminamos levantando nuestro sitio con:

#+begin_src
mvn tomcat7:run
#+end_src

E ingresamos a la siguiente url.

http://localhost:8080/mi-primer-aplicacion-web/registro.xhtml
