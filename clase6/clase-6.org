#+title: CSS, JavaScript y Google Maps
#+author: Miguel Piña
#+date: [2017-03-27 lun 12:52]


* ¿Qué son los CSS?

Los css (Cascade StyleSheet) o hojas de estilo en cascada, son lo que permiten a
las páginas web mostrarse con todos los colores y personalidad que
conocemos. Permiten mostrar que color va a tener ciertos elementos gráficos, el
tamaño e incluso como se deben mostrar si están en un dispositivo móvil o no.

Debido a la explosión actual de construcción de páginas web que también buscan
ser utilizadas desde móviles, se han creado varios frameworks para facilitar la
creación de estilos para los sitios web.

** Diseño responsivo y adaptativo

- El diseño web de tipo responsive :: lo que hace es adaptar la estructura de la
     web y todos los elementos que lo integran a la pantalla de nuestro
     dispositivo para ofrecer un excelente aspecto visual y una gran
     funcionalidad atendiendo a criterios como la accesibilidad a los
     contenidos. Para lograr este tipo de diseños es necesarios que se
     establezcan valores de tamaño proporcionales en lugar de establecer valores
     fijos. Se hace uso de media queries y hojas de estilo para lograr un buen
     resultado. En muchos casos es necesario modificar la estructura original
     para favorecer la experiencia del usuario cambiando la disposición de los
     menús por ejemplo y evitando excesivos scrolls o métodos de acceso poco
     cómodos desde otros dispositivos.

- El diseño web adaptative :: no resulta tan flexible como el diseño
     responsive. Éste utiliza tamaños de pantalla fijos y preestabelcidos para
     cada uno de los dispositivos donde se vaya a reproducir la página en
     cuestión. Una de sus virtudes podríamos decir que es su sencillez a nivel
     de código. Crear un diseño adaptativo no necesita de tanto código como un
     diseño responsive.

** Bootstrap

Bootstrap, es un framework originalmente creado por Twitter, que permite crear
interfaces web con CSS y JavaScript, cuya particularidad es la de adaptar la
interfaz del sitio web al tamaño del dispositivo en que se visualice. Es decir,
el sitio web se adapta automáticamente al tamaño de una PC, una Tablet u otro
dispositivo. Esta técnica de diseño y desarrollo se conoce como “responsive
design” o diseño adaptativo.

** Integrando bootstrap

Existe un paquete llamado bootsfaces que es una extensión a bootstrap para ser
utilizado con primefaces. Esto facilitará la integración de bootstrap con los
componentes que provee primefaces. Para poder hacer uso de esta herramienta, en
el archivo pom.xml de nuestro proyecto hay que integrar lo siguiente:

#+begin_src xml
<dependency>
    <groupId>net.bootsfaces</groupId>
    <artifactId>bootsfaces</artifactId>
    <version>1.0.1</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>org.primefaces</groupId>
    <artifactId>primefaces</artifactId>
    <version>6.0</version>
    <scope>compile</scope>
</dependency>
#+end_src

y tomando como ejemplo una página de bootsfaces, creamos la siguiente página:

#+begin_src html
<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:b="http://bootsfaces.net/ui">
    <h:head>
        <title>Project Name</title>
        <meta name="author" content="The Author"></meta>
    </h:head>
    <!-- Add 50px padding top to the body for the navbar -->
    <h:body style="padding-top: 50px; padding-bottom: 20px;">
        <b:navBar brand="Brand" brandHref="#" inverse="true" fixed="top">
            <b:navbarLinks>
                <b:navLink value="Link" href="#"></b:navLink>
                <b:navLink value="Link" href="#"></b:navLink>
                <b:dropMenu value="Dropdown">
                    <b:navLink value="Action" href="#"></b:navLink>
                    <b:navLink value="Another action" href="#"></b:navLink>
                    <b:navLink value="Something else here" href="#"></b:navLink>
                    <b:navLink></b:navLink>
                    <b:navLink header="Nav header"></b:navLink>
                    <b:navLink value="Separated link" href="#"></b:navLink>
                    <b:navLink value="One more separated link" href="#"></b:navLink>
                </b:dropMenu>
            </b:navbarLinks>
            <h:form styleClass="navbar-form navbar-right">
                <div class="form-group">
                    <b:inputText placeholder="Email" fieldSize="sm"/>
                    <!--input type="text" class="form-control" placeholder="Search"/-->
                </div>
                <div class="form-group">
                    <b:inputSecret placeholder="Password" fieldSize="sm"/>
                </div>
                #{' '}
                <b:commandButton action="a" value="Sign in" look="success" icon="chevron-right" iconAlign="right"/>
            </h:form>
        </b:navBar>
        <b:jumbotron>
            <b:container>
                <h1>Hello, world!</h1>
                <p>This is a template for a simple marketing or informational website. It includes a large callout called a jumbotron and three supporting pieces of content.
                   Use it as a starting point to create something more unique.
                </p>
                <p>
                    <a href="https://github.com/TheCoder4eu/BootsFaces-examples/blob/master/src/main/webapp/jumbotron.xhtml" class="btn btn-lg btn-info">View Page Source »</a>
                </p>
            </b:container>

        </b:jumbotron>
        <b:container>
            <b:row>
                <b:column col-md="4">
                    <h2>Heading</h2>
                    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh,
                       ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. </p>
                    <p><b:button outcome="" value="View details »"/></p>
                </b:column>
                <b:column col-md="4">
                    <h2>Heading</h2>
                    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh,
                       ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. </p>
                    <p><b:button outcome="" value="View details »"/></p>
                </b:column>
                <b:column col-md="4">
                    <h2>Heading</h2>
                    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh,
                       ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. </p>
                    <p><b:button outcome="" value="View details »"/></p>
                </b:column>
            </b:row>
            <hr/>
            <footer>
            <p>© Company 2014</p>
            </footer>
        </b:container>

    </h:body>
</html>
#+end_src

* Implementando un inicio y cierre de sesión simple con Bootsfaces

Usando bootsfaces, podemos implementar un inicio y cierre de sesión que
visualmente se vea bien y sea responsivo.

Agreguemos el siguiente código a nuestra aplicación:

*signin.xhtml*
#+begin_src html
  <?xml version='1.0' encoding='UTF-8' ?>
  <!DOCTYPE html>
  <html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:b="http://bootsfaces.net/ui"
        xmlns:ui="http://java.sun.com/jsf/facelets">
      <h:head>
          <title>Inicio de sesión</title>
          <meta name="author" content="Miguel Piña"></meta>
          <style type="text/css">
              .form-signin {
                  margin: 0 auto;
                  max-width: 330px;
                  padding: 15px;
              }
          </style>
      </h:head>
      <h:body style="padding-top: 60px; background-color: #add;">
          <b:container>
              <h:form styleClass="form-signin" prependId="false">
                  <h2 class="form-signin-heading">Por favor inicie sesión</h2>
                  <b:messages/>
                  <b:inputText id="email" placeholder="Nombre de usuario" value="#{login.usuario}">
                      <f:facet name="prepend">
                          <b:icon name="user" />
                      </f:facet>
                  </b:inputText>
                  <b:inputText id="password" placeholder="Contraseña" type="password" value="#{login.password}">
                      <f:facet name="prepend">
                          <b:iconAwesome name="key"/>
                      </f:facet>
                  </b:inputText>
                  <b:selectBooleanCheckbox value="true" caption="Recordarme"/>
                  <b:commandButton look="primary btn-block" value="Iniciar sesión" icon="log-in" size="lg" action="#{login.login()}"/>
              </h:form>
          </b:container>
      </h:body>
  </html>
#+end_src

*Login.java*

#+begin_src java
  /*
   * To change this license header, choose License Headers in Project Properties.
   * To change this template file, choose Tools | Templates
   * and open the template in the editor.
   */
  package com.miguel.proyecto.web;

  import javax.faces.application.FacesMessage;
  import javax.faces.bean.ManagedBean;
  import javax.faces.bean.RequestScoped;
  import javax.faces.context.FacesContext;
  import javax.servlet.http.HttpServletRequest;

  /**
   *
   * Bean manejado qué se utiliza para el manejo de inicio de Sesión en
   * la aplicación web.
   *
   * @author miguel
   */
  @ManagedBean // LEER LA DOCUMENTACIÖN DE ESTA ANOTACIÓN: Permite dar de alta al bean en la aplicación
  @RequestScoped // Sólo está disponible a partir de peticiones al bean
  public class Login {

      private String usuario;
      private String password;
      private final HttpServletRequest httpServletRequest; // Obtiene información de todas las peticiones de usuario.
      private final FacesContext faceContext; // Obtiene información de la aplicación
      private FacesMessage message;

      /**
       * Constructor para inicializar los valores de faceContext y
       * httpServletRequest.
       */
      public Login() {
          faceContext = FacesContext.getCurrentInstance();
          httpServletRequest = (HttpServletRequest) faceContext.getExternalContext().getRequest();
      }

      /**
       * Obtiene el nombre de usuario.
       *
       * @return El nombre de usuario.
       */
      public String getUsuario() {
          return usuario;
      }

      /**
       * Establece el nombre de usuario.
       *
       * @param usuario El nombre de usuario a establecer.
       */
      public void setUsuario(String usuario) {
          this.usuario = usuario;
      }

      /**
       * Regresa la contraseña del usuario.
       *
       * @return La contraseña del usuario.
       */
      public String getPassword() {
          return password;
      }

      /**
       * Establece la contraseña del usuario.
       *
       * @param contrasena La contraseña del usuario a establecer.
       */
      public void setPassword(String password) {
          this.password = password;
      }

      /**
       * Método encargado de validar el inicio de sesión.
       *
       * @return El nombre de la vista que va a responder.
       */
      public String login() {
          if (usuario.equalsIgnoreCase("miguel") && password.equalsIgnoreCase("password")) {
              httpServletRequest.getSession().setAttribute("sessionUsuario", usuario);
              message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Acceso Correcto", null);
              faceContext.addMessage(null, message);
              return "acceso";
          }
          message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Usuario o contraseña incorrecto", null);
          faceContext.addMessage(null, message);
          return "signin";
      }

  }

#+end_src

*acceso.xhtml*

#+begin_src html
<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:b="http://bootsfaces.net/ui">
  <h:head>
    <title>Acceso concedido</title>
    <link rel="stylesheet" href="cssFormulario.css"/>
  </h:head>
  <h:body style="padding-top: 60px; background-color: #add;">
    <b:jumbotron>
      <b:container>
        <h2>Inicio</h2>
        <p><b:messages/></p>
        <p><h:outputLabel value="Ingreso con el usuario: "/><b:label text="#{logout.usuario}" severity="info"/></p>
        <h:form>
          <section class="seccionBotones">
            <b:commandButton value="cerrar session" action="#{logout.cerrarSession()}"/>
          </section>
        </h:form>
      </b:container>
    </b:jumbotron>

  </h:body>
</html>
#+end_src

*Logout.java*

#+begin_src java
  /*
   * To change this license header, choose License Headers in Project Properties.
   * To change this template file, choose Tools | Templates
   * and open the template in the editor.
   */
  package com.miguel.proyecto.web;

  import javax.faces.application.FacesMessage;
  import javax.faces.bean.ManagedBean;
  import javax.faces.bean.RequestScoped;
  import javax.faces.context.FacesContext;
  import javax.servlet.http.HttpServletRequest;

  /**
   * Managed Bean para manejar el cierre de sesión de la aplicación.
   */
  @ManagedBean // LEER LA DOCUMENTACIÖN DE ESTA ANOTACIÓN: Permite dar de alta al bean en la aplicación
  @RequestScoped // Sólo está disponible a partir de peticiones al bean
  public class Logout {

      private String usuario; // Representa el nombre de usuario.
      private final HttpServletRequest httpServletRequest; // Obtiene información de todas las peticiones de usuario.
      private final FacesContext faceContext; // Obtiene información de la aplicación
      private FacesMessage message; // Permite el envio de mensajes entre el bean y la vista.

      /**
       * Constructor para inicializar los valores de faceContext y
       * httpServletRequest, además de la sesión de usuario.
       */
      public Logout() {
          faceContext = FacesContext.getCurrentInstance();
          httpServletRequest = (HttpServletRequest) faceContext.getExternalContext().getRequest();
          if (httpServletRequest.getSession().getAttribute("sessionUsuario") != null) {
              usuario = httpServletRequest.getSession().getAttribute("sessionUsuario").toString();
          }
      }

      /**
       * Método encargado de cerrar la sesión de la aplicación.
       *
       * @return El nombre de la vista que va a responder.
       */
      public String cerrarSession() {
          httpServletRequest.getSession().removeAttribute("sessionUsuario");
          message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Session cerrada correctamente", null);
          faceContext.addMessage(null, message);
          return "signin";
      }

      /**
       * Regresa el nombre de usuario.
       *
       * @return El nombre de usuario.
       */
      public String getUsuario() {
          return usuario;
      }

      /**
       * Establece el nombre de usuario.
       *
       * @param usuario El nombre de usuario a establecer.
       */
      public void setUsuario(String usuario) {
          this.usuario = usuario;
      }

  }
#+end_src
